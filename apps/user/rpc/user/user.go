// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package user

import (
	"context"

	"jt-chat/apps/user/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Application                       = pb.Application
	Contact                           = pb.Contact
	CreateContactApplicationIn        = pb.CreateContactApplicationIn
	CreateContactApplicationOut       = pb.CreateContactApplicationOut
	CreateGroupIn                     = pb.CreateGroupIn
	CreateGroupOut                    = pb.CreateGroupOut
	DeleteContactIn                   = pb.DeleteContactIn
	DeleteContactOut                  = pb.DeleteContactOut
	DeleteGroupIn                     = pb.DeleteGroupIn
	DeleteGroupOut                    = pb.DeleteGroupOut
	DeleteUserGroupMapIn              = pb.DeleteUserGroupMapIn
	DeleteUserGroupMapOut             = pb.DeleteUserGroupMapOut
	GetContactApplicationListIn       = pb.GetContactApplicationListIn
	GetContactApplicationListOut      = pb.GetContactApplicationListOut
	GetContactListIn                  = pb.GetContactListIn
	GetContactListOut                 = pb.GetContactListOut
	GetGroupContactApplicationListIn  = pb.GetGroupContactApplicationListIn
	GetGroupContactApplicationListOut = pb.GetGroupContactApplicationListOut
	GetGroupUserListIn                = pb.GetGroupUserListIn
	GetGroupUserListOut               = pb.GetGroupUserListOut
	GetUserListIn                     = pb.GetUserListIn
	GetUserListOut                    = pb.GetUserListOut
	GroupUser                         = pb.GroupUser
	LoginIn                           = pb.LoginIn
	LoginOut                          = pb.LoginOut
	RegisterIn                        = pb.RegisterIn
	RegisterOut                       = pb.RegisterOut
	UpdateContactApplicationIn        = pb.UpdateContactApplicationIn
	UpdateContactApplicationOut       = pb.UpdateContactApplicationOut
	UpdateGroupIn                     = pb.UpdateGroupIn
	UpdateGroupOut                    = pb.UpdateGroupOut
	UpdateIn                          = pb.UpdateIn
	UpdateOut                         = pb.UpdateOut
	User                              = pb.User

	UserZrpcClient interface {
		Login(ctx context.Context, in *LoginIn, opts ...grpc.CallOption) (*LoginOut, error)
		Register(ctx context.Context, in *RegisterIn, opts ...grpc.CallOption) (*RegisterOut, error)
		GetUserList(ctx context.Context, in *GetUserListIn, opts ...grpc.CallOption) (*GetUserListOut, error)
		GetGroupUserList(ctx context.Context, in *GetGroupUserListIn, opts ...grpc.CallOption) (*GetGroupUserListOut, error)
		UpdateUser(ctx context.Context, in *UpdateIn, opts ...grpc.CallOption) (*UpdateOut, error)
		CreateGroup(ctx context.Context, in *CreateGroupIn, opts ...grpc.CallOption) (*CreateGroupOut, error)
		UpdateGroup(ctx context.Context, in *UpdateGroupIn, opts ...grpc.CallOption) (*UpdateGroupOut, error)
		DeleteUserGroupMap(ctx context.Context, in *DeleteUserGroupMapIn, opts ...grpc.CallOption) (*DeleteUserGroupMapOut, error)
		DeleteGroup(ctx context.Context, in *DeleteGroupIn, opts ...grpc.CallOption) (*DeleteGroupOut, error)
		GetContactList(ctx context.Context, in *GetContactListIn, opts ...grpc.CallOption) (*GetContactListOut, error)
		DeleteContact(ctx context.Context, in *DeleteContactIn, opts ...grpc.CallOption) (*DeleteContactOut, error)
		GetContactApplicationList(ctx context.Context, in *GetContactApplicationListIn, opts ...grpc.CallOption) (*GetContactApplicationListOut, error)
		GetGroupContactApplicationList(ctx context.Context, in *GetGroupContactApplicationListIn, opts ...grpc.CallOption) (*GetGroupContactApplicationListOut, error)
		CreateContactApplication(ctx context.Context, in *CreateContactApplicationIn, opts ...grpc.CallOption) (*CreateContactApplicationOut, error)
		UpdateContactApplication(ctx context.Context, in *UpdateContactApplicationIn, opts ...grpc.CallOption) (*UpdateContactApplicationOut, error)
	}

	defaultUserZrpcClient struct {
		cli zrpc.Client
	}
)

func NewUserZrpcClient(cli zrpc.Client) UserZrpcClient {
	return &defaultUserZrpcClient{
		cli: cli,
	}
}

func (m *defaultUserZrpcClient) Login(ctx context.Context, in *LoginIn, opts ...grpc.CallOption) (*LoginOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) Register(ctx context.Context, in *RegisterIn, opts ...grpc.CallOption) (*RegisterOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) GetUserList(ctx context.Context, in *GetUserListIn, opts ...grpc.CallOption) (*GetUserListOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserList(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) GetGroupUserList(ctx context.Context, in *GetGroupUserListIn, opts ...grpc.CallOption) (*GetGroupUserListOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetGroupUserList(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) UpdateUser(ctx context.Context, in *UpdateIn, opts ...grpc.CallOption) (*UpdateOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) CreateGroup(ctx context.Context, in *CreateGroupIn, opts ...grpc.CallOption) (*CreateGroupOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.CreateGroup(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) UpdateGroup(ctx context.Context, in *UpdateGroupIn, opts ...grpc.CallOption) (*UpdateGroupOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateGroup(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) DeleteUserGroupMap(ctx context.Context, in *DeleteUserGroupMapIn, opts ...grpc.CallOption) (*DeleteUserGroupMapOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.DeleteUserGroupMap(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) DeleteGroup(ctx context.Context, in *DeleteGroupIn, opts ...grpc.CallOption) (*DeleteGroupOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.DeleteGroup(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) GetContactList(ctx context.Context, in *GetContactListIn, opts ...grpc.CallOption) (*GetContactListOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetContactList(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) DeleteContact(ctx context.Context, in *DeleteContactIn, opts ...grpc.CallOption) (*DeleteContactOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.DeleteContact(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) GetContactApplicationList(ctx context.Context, in *GetContactApplicationListIn, opts ...grpc.CallOption) (*GetContactApplicationListOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetContactApplicationList(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) GetGroupContactApplicationList(ctx context.Context, in *GetGroupContactApplicationListIn, opts ...grpc.CallOption) (*GetGroupContactApplicationListOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetGroupContactApplicationList(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) CreateContactApplication(ctx context.Context, in *CreateContactApplicationIn, opts ...grpc.CallOption) (*CreateContactApplicationOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.CreateContactApplication(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) UpdateContactApplication(ctx context.Context, in *UpdateContactApplicationIn, opts ...grpc.CallOption) (*UpdateContactApplicationOut, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateContactApplication(ctx, in, opts...)
}
