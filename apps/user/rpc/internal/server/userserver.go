// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"jt-chat/apps/user/rpc/internal/logic"
	"jt-chat/apps/user/rpc/internal/svc"
	"jt-chat/apps/user/rpc/pb"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) Login(ctx context.Context, in *pb.LoginIn) (*pb.LoginOut, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UserServer) Register(ctx context.Context, in *pb.RegisterIn) (*pb.RegisterOut, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

func (s *UserServer) GetUserList(ctx context.Context, in *pb.GetUserListIn) (*pb.GetUserListOut, error) {
	l := logic.NewGetUserListLogic(ctx, s.svcCtx)
	return l.GetUserList(in)
}

func (s *UserServer) GetGroupUserList(ctx context.Context, in *pb.GetGroupUserListIn) (*pb.GetGroupUserListOut, error) {
	l := logic.NewGetGroupUserListLogic(ctx, s.svcCtx)
	return l.GetGroupUserList(in)
}

func (s *UserServer) UpdateUser(ctx context.Context, in *pb.UpdateIn) (*pb.UpdateOut, error) {
	l := logic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

func (s *UserServer) CreateGroup(ctx context.Context, in *pb.CreateGroupIn) (*pb.CreateGroupOut, error) {
	l := logic.NewCreateGroupLogic(ctx, s.svcCtx)
	return l.CreateGroup(in)
}

func (s *UserServer) UpdateGroup(ctx context.Context, in *pb.UpdateGroupIn) (*pb.UpdateGroupOut, error) {
	l := logic.NewUpdateGroupLogic(ctx, s.svcCtx)
	return l.UpdateGroup(in)
}

func (s *UserServer) DeleteUserGroupMap(ctx context.Context, in *pb.DeleteUserGroupMapIn) (*pb.DeleteUserGroupMapOut, error) {
	l := logic.NewDeleteUserGroupMapLogic(ctx, s.svcCtx)
	return l.DeleteUserGroupMap(in)
}

func (s *UserServer) DeleteGroup(ctx context.Context, in *pb.DeleteGroupIn) (*pb.DeleteGroupOut, error) {
	l := logic.NewDeleteGroupLogic(ctx, s.svcCtx)
	return l.DeleteGroup(in)
}

func (s *UserServer) GetContactList(ctx context.Context, in *pb.GetContactListIn) (*pb.GetContactListOut, error) {
	l := logic.NewGetContactListLogic(ctx, s.svcCtx)
	return l.GetContactList(in)
}

func (s *UserServer) DeleteContact(ctx context.Context, in *pb.DeleteContactIn) (*pb.DeleteContactOut, error) {
	l := logic.NewDeleteContactLogic(ctx, s.svcCtx)
	return l.DeleteContact(in)
}

func (s *UserServer) GetContactApplicationList(ctx context.Context, in *pb.GetContactApplicationListIn) (*pb.GetContactApplicationListOut, error) {
	l := logic.NewGetContactApplicationListLogic(ctx, s.svcCtx)
	return l.GetContactApplicationList(in)
}

func (s *UserServer) GetGroupContactApplicationList(ctx context.Context, in *pb.GetGroupContactApplicationListIn) (*pb.GetGroupContactApplicationListOut, error) {
	l := logic.NewGetGroupContactApplicationListLogic(ctx, s.svcCtx)
	return l.GetGroupContactApplicationList(in)
}

func (s *UserServer) CreateContactApplication(ctx context.Context, in *pb.CreateContactApplicationIn) (*pb.CreateContactApplicationOut, error) {
	l := logic.NewCreateContactApplicationLogic(ctx, s.svcCtx)
	return l.CreateContactApplication(in)
}

func (s *UserServer) UpdateContactApplication(ctx context.Context, in *pb.UpdateContactApplicationIn) (*pb.UpdateContactApplicationOut, error) {
	l := logic.NewUpdateContactApplicationLogic(ctx, s.svcCtx)
	return l.UpdateContactApplication(in)
}
