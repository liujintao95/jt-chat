// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupFieldNames          = builder.RawFieldNames(&Group{})
	groupRows                = strings.Join(groupFieldNames, ",")
	groupRowsExpectAutoSet   = strings.Join(stringx.Remove(groupFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	groupRowsWithPlaceHolder = strings.Join(stringx.Remove(groupFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	groupModel interface {
		Insert(ctx context.Context, data *Group) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Group, error)
		FindOneByGid(ctx context.Context, gid string) (*Group, error)
		Update(ctx context.Context, data *Group) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGroupModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Group struct {
		Id        int64          `db:"id"`
		Gid       string         `db:"gid"`        // gid
		Name      string         `db:"name"`       // 群名
		Avatar    string         `db:"avatar"`     // 群头像
		Notice    sql.NullString `db:"notice"`     // 群备注
		AdminUid  string         `db:"admin_uid"`  // 管理员uid
		DeletedAt sql.NullTime   `db:"deleted_at"` // 删除时间
		CreatedAt time.Time      `db:"created_at"` // 创建时间
		UpdatedAt time.Time      `db:"updated_at"` // 更新时间
	}
)

func newGroupModel(conn sqlx.SqlConn) *defaultGroupModel {
	return &defaultGroupModel{
		conn:  conn,
		table: "`group`",
	}
}

func (m *defaultGroupModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGroupModel) FindOne(ctx context.Context, id int64) (*Group, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupRows, m.table)
	var resp Group
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupModel) FindOneByGid(ctx context.Context, gid string) (*Group, error) {
	var resp Group
	query := fmt.Sprintf("select %s from %s where `gid` = ? limit 1", groupRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, gid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupModel) Insert(ctx context.Context, data *Group) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, groupRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Gid, data.Name, data.Avatar, data.Notice, data.AdminUid, data.DeletedAt)
	return ret, err
}

func (m *defaultGroupModel) Update(ctx context.Context, newData *Group) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Gid, newData.Name, newData.Avatar, newData.Notice, newData.AdminUid, newData.DeletedAt, newData.Id)
	return err
}

func (m *defaultGroupModel) tableName() string {
	return m.table
}
